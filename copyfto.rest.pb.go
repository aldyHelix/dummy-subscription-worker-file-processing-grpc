// Code generated by github.com/citradigital/toldata. DO NOT EDIT.
// package: copyfto
// source: copyfto.proto
package copyfto


import (
  "encoding/json"
	"github.com/citradigital/toldata"
	context "golang.org/x/net/context"
	"net/http"
	"time"
)

func throwError(w http.ResponseWriter, message string, code int) {
	errorMessage := toldata.ErrorMessage{
	  ErrorMessage: message,
		Timestamp: time.Now().Unix(),
	}
  msg, err := json.Marshal(errorMessage)
	if err != nil {
		 http.Error(w, "{\"error-message\": \"internal-server-error\"}", http.StatusInternalServerError)
	} else {
	   http.Error(w, string(msg), code)
	}
} 




type CopyftoREST struct {
	Context context.Context
	Bus     *toldata.Bus
	Service *CopyftoToldataClient
}

func NewCopyftoREST(ctx context.Context, config toldata.ServiceConfiguration) (*CopyftoREST, error) {
	

	service := CopyftoREST{
		Context: ctx,
	
		Service: NewCopyftoToldataClient(nil),
	
	}

	return &service, nil
}

func (svc *CopyftoREST) InstallCopyftoMux(mux *http.ServeMux) {


	






  mux.HandleFunc("/api/copyfto/Copyfto/CopyFileDummyOrder", 
	func (w http.ResponseWriter, r *http.Request) {
		if r.Method != "POST" {
			throwError(w, "Invalid request method", http.StatusMethodNotAllowed)
			return
		}

		var req Empty
		err := json.NewDecoder(r.Body).Decode(&req)
		if err != nil {
			throwError(w, err.Error(), http.StatusBadRequest)
			return
		}
		ret, err := svc.Service.CopyFileDummyOrder(svc.Context, &req)
		if err != nil {
			throwError(w, err.Error(), http.StatusInternalServerError)
			return
		}

		msg, err := json.Marshal(ret)
		if err != nil {
			throwError(w, err.Error(), http.StatusInternalServerError)
			return
		} else {
			w.Write(msg)
		}
	})


}



	